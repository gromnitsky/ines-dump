#!/usr/bin/env node
'use strict'

let fs = require('fs')
let R = require('ramda')
let sprintf = require('sprintf-js').sprintf
let cmd = require('commander')
let parse = require('./index')
let meta = require('./package.json')

function main() {
    cmd.version(meta.version)
	.usage('[options] [file.nes ...]')
	.option('-f, --format <type>', 'jsonl, shell, human')
	.option('-a, --all', 'output all available info')
	.option('--nointro', 'extract additional info from file _names_')
	.parse(process.argv)

    let src = cmd.args.length ? cmd.args : ['/dev/stdin']
    let first = true

    for (let input of src) {
	let r
	try {
	    r = parse(open(input), cmd)
	} catch(err) {
	    console.error(`${cmd._name} error: ${sq(input)}: ${err.message}`)
	    process.exitCode = 1
	    continue
	}

	print(filter(r, cmd), R.mergeRight(cmd, {first}))
	first = false
    }
}

function print(rom, opt) {
    if (opt.format === 'shell') {
	if (!opt.first) console.log('')
	R.mapObjIndexed( (val, key) => {
	    if (key === 'date') val = val.toISOString()
	    console.log(`${key}=${sq(val)}`)
	}, rom)

    } else if (opt.format === 'jsonl') {
	process.stdout.write(JSON.stringify(rom) + "\n")

    } else { // human-readable
	if (!opt.first) console.log('')
	R.mapObjIndexed( (val, key) => {
	    if (Array.isArray(val)) val = val.join(', ')
	    if (key === 'date') val = `${val.getUTCMonth()+1}/${val.getUTCFullYear()}`
	    console.log(sprintf('%-23s  %s', key, val))
	}, rom)
    }
}

function filter(rom, opt) {
    let essential = ['file', 'rom_size',
		     'name', 'publisher', 'regions', 'variant', 'date',
		     'licensed',
		     'crc32', 'sha1',
		     'tv_system9_pal', 'has_trainer',
		     'is_vs_unisystem', 'is_playchoice10']
    let uninteresting = ['header', 'prg_rom', 'chr_rom', 'trailer']
    return opt.all ? R.omit(uninteresting, rom) : R.pick(essential, rom)
}

function open(input) {
    return {
	file: input,
	buf: fs.readFileSync(input)
    }
}

function sq(s) {
    return /^[\w-,/]+$/.test(s) ? s : "'" + s.toString().replace(/'/g, "'\\''") + "'"
}


main()
